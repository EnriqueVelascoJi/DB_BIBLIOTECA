-- CREATE TABLE libro
CREATE TABLE libro(
LIB_id SERIAL PRIMARY KEY,
LIB_titulo VARCHAR(50) NOT NULL,
LIB_autor VARCHAR(40) NOT NULL,
LIB_ISBN VARCHAR(13) NOT NULL,
LIB_editorial VARCHAR(15) NOT NULL,
LIB_edicion INTEGER NOT NULL,
LIB_copias_venta INTEGER NOT NULL,
LIB_copias_servicio INTEGER NOT NULL,
LIB_precio DECIMAL(6,2) NOT NULL
);

--MODYFYING THE TABLE LIBRO TO ADD CHECKS
ALTER TABLE libro
ADD CHECK (LIB_copias_venta>=0),
ADD CHECK (LIB_copias_servicio>=0);dc


--CREATE TABLE PRESTAMO 
CREATE TABLE prestamo(
PRE_id SERIAL PRIMARY KEY,
PRE_hora_prestamo TIME NOT NULL,
PRE_hora_regreso TIME NOT NULL,
PRE_fecha DATE NOT NULL
);

--CREATE TABLE VENTA
CREATE TABLE venta(
VEN_id SERIAL PRIMARY KEY,
VEN_forma_pago VARCHAR(15) NOT NULL,
VEN_fecha TIMESTAMP NOT NULL,
VEN_impuesto INTEGER NOT NULL,
VEN_total DECIMAL(7,2) NOT NULL,

CHECK(VEN_forma_pago in ('efectivo','tarjeta debito','tarjeta credito')),
CHECK (VEN_impuesto>=0)
);

--CREATE TABLE FICHA_PRESTAMO
CREATE TABLE ficha_prestamo(
FP_id SERIAL PRIMARY KEY,
PRE_id INTEGER NOT NULL,
LIB_id INTEGER NOT NULL,
FP_estado BOOL NOT NULL,

FOREIGN KEY (PRE_id) REFERENCES prestamo (PRE_id),
FOREIGN KEY (LIB_id) REFERENCES libro (LIB_id) ON DELETE CASCADE

);


--CREATE TABLE DETALLE_VENTA
create table detalle_venta(
DV_id SERIAL PRIMARY KEY,
VEN_id INTEGER NOT NULL,
LIB_id INTEGER NOT NULL,
DV_cantidad INTEGER NOT NULL,
DV_descuento INTEGER NOT NULL,

FOREIGN KEY (VEN_id) REFERENCES venta (VEN_id),
FOREIGN KEY (LIB_id) REFERENCES libro (LIB_id),
CHECK (DV_cantidad>=1),
CHECK (DV_descuento>=0)

);



--Tablas con relacion a los socios
--Tablas: Socio

CREATE TABLE Socio(
SOC_id SERIAL PRIMARY KEY,
SOC_Nombre VARCHAR(40) NOT NULL,
SOC_Telefono VARCHAR(15) NOT NULL,
SOC_Email VARCHAR(50),
SOC_Direccion VARCHAR(50) NOT NULL,
SOC_Reputacion VARCHAR(20) NOT NULL,
SOC_Puntos INTEGER NOT NULL,
SOC_Identificador INTEGER NOT NULL,
CHECK (SOC_Reputacion in ('Sin reputacion','Buena','Mala','Excelente')),
CHECK (SOC_Puntos>=0)
);

--Tablas con informacion de rentas
--Tablas: Renta & Ficha_Renta

CREATE TABLE Renta (
REN_id SERIAL PRIMARY KEY,
REN_Fecha_Renta DATE NOT NULL,
REN_Fechs_Regreso DATE NOT NULL,
SOC_id INTEGER NOT NULL,
	
FOREIGN KEY (SOC_id) REFERENCES Socio(SOC_id)
);

--
CREATE TABLE Ficha_Renta(
FR_id SERIAL PRIMARY KEY,
FR_estado BOOL NOT NULL,

REN_id INTEGER NOT NULL,
LIB_id INTEGER NOT NULL,

FOREIGN KEY (REN_id) REFERENCES Renta(REN_id),
FOREIGN KEY (LIB_id) REFERENCES Libro(LIB_id)
);

--Informacion de listas de espera y multas
--Tablas: Lista_Espera  &  Multa

CREATE TABLE Lista_Espera(
LE_id SERIAL PRIMARY KEY,
LE_Estado BOOL NOT NULL,

SOC_id INTEGER NOT NULL,
LIB_id INTEGER NOT NULL,

FOREIGN KEY (SOC_id) REFERENCES Socio(SOC_id),
FOREIGN KEY (LIB_id) REFERENCES Libro(LIB_id)
);
--
CREATE TABLE Multa(
MUL_id SERIAL NOT NULL,
MUL_monto DECIMAL (6,2) NOT NULL,
MUL_descripcion VARCHAR(50) NOT NULL,
MUL_Estado BOOL NOT NULL,
	
SOC_id INTEGER NOT NULL,
	
FOREIGN KEY (SOC_id) REFERENCES Socio(SOC_id)
);

--Creacion de la tabla con informacion de sucursales
--Tabla: Sedes

CREATE TABLE Sedes(
SED_id SERIAL PRIMARY KEY,
SED_direccion VARCHAR(50) NOT NULL,
SED_Telefono VARCHAR(15) NOT NULL,

LIB_id INTEGER NOT NULL,
SOC_id INTEGER NOT NULL,

FOREIGN KEY (LIB_id) REFERENCES Libro(LIB_id),
FOREIGN KEY (SOC_id) REFERENCES Socio(SOC_id)

);